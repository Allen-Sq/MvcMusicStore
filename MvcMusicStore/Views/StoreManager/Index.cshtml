@model IEnumerable<MvcMusicStore.Models.Album>

@helper Truncate(string input, int length) {
    /*助手方法取得一个字符串和一个最大长度，如果字符串长度小于指定的长度，就直接返回这个串，
     *如果大于最大长度，那么，就截断字符串，然后在剩下的最后增加 "…" 。
     * 如果希望在多个视图中使用这个扩展的助手方法，可以写一个帮助类helpers*/
    if (input.Length <= length)
            {
                @input
            }
            else
            {
                @input.Substring(0,length)<text>...</text>
            }
     }

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Artist)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Genre)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Title)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Price)
        </th>
        @*<th>
            @Html.DisplayNameFor(model => model.AlbumArtUrl)
        </th>*@
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @*@Html.DisplayFor(modelItem => item.Artist.Name)*@
            @Truncate(item.Artist.Name, 25)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Genre.Name)
        </td>
        <td>
            @*@Html.DisplayFor(modelItem => item.Title)*@
            @Truncate(item.Title,25)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Price)
        </td>
        @*<td>
            @Html.DisplayFor(modelItem => item.AlbumArtUrl)
        </td>*@
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.AlbumId }) |
            @Html.ActionLink("Details", "Details", new { id=item.AlbumId }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.AlbumId })
        </td>
    </tr>
}

</table>
